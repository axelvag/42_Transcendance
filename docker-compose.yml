version: "3.8"

services:
  # Front - prod (build)
  front:
    build:
      context: ./front
      dockerfile: Dockerfile
    container_name: front
    ports:
      - "8000:80"
    networks:
      - front
    depends_on:
      - authentification
    restart: on-failure
    profiles:
      - prod

  # Front - dev (live server)
  front_dev:
    build:
      context: ./front
      dockerfile: Dockerfile.dev
    container_name: front_dev
    volumes:
      - /app/node_modules
      - type: bind
        source: ./front/app
        target: /app
    ports:
      - "8000:8000"
    networks:
      - front
    restart: on-failure
    profiles:
      - dev

  # Back - authentification
  authentification:
    build:
      context: ./authentification
      dockerfile: Dockerfile
    container_name: authentification
    ports:
      - "8001:8001"
    volumes:
      - ./authentification:/app
    networks:
      - back
    depends_on:
      - data_base
      - profile
      - friendship
      - statistic
    environment:
      - POSTGRES_HOST=data_base # Utilisez le nom du service comme hôte
      - POSTGRES_DB=transcendence
      - POSTGRES_USER=postgresTranscendence
      - POSTGRES_PASSWORD=postgresTranscendence123
    restart: on-failure

  profile:
    build:
      context: ./profile
      dockerfile: Dockerfile
    container_name: profile
    ports:
      - "8002:8002"
    networks:
      - back
    depends_on:
      - data_base
    restart: on-failure

  # Data base PostGreSQL
  # data_base:
  #   build:
  #     context: ./data_base/Docker
  #     dockerfile: Dockerfile
  #   container_name: data_base
  #   env_file:
  #     - .env
  #   volumes:
  #     - data_base:/custom_postgres_data
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - back
  #   restart: on-failure

  # Back - data base
  data_base:
    container_name: data_base
    image: postgres:16.0-bookworm
    environment:
      - POSTGRES_DB=transcendence
      - POSTGRES_USER=postgresTranscendence
      - POSTGRES_PASSWORD=postgresTranscendence123
    ports:
      - "5432:5432"
    volumes:
      - data_base_data:/var/lib/postgresql/data
    restart: always
    networks:
      - back

  # Back - api gateway
  api_gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: api_gateway
    ports:
      - "5000:5000"
    networks:
      - back
    depends_on:
      - authentification
      - profile
      - data_base
    restart: on-failure

  friendship:
    build:
      context: ./friendship
      dockerfile: Dockerfile
    container_name: friendship
    ports:
      - "8003:8003"
    networks:
      - back
    depends_on:
      - data_base
    environment:
      - POSTGRES_HOST=data_base
      - POSTGRES_DB=transcendence
      - POSTGRES_USER=postgresTranscendence
      - POSTGRES_PASSWORD=postgresTranscendence123
    restart: on-failure

  statistic:
    build:
      context: ./statistic
      dockerfile: Dockerfile
    container_name: statistic
    ports:
      - "8004:8004"
    networks:
      - back
    depends_on:
      - data_base
    restart: on-failure
    environment:
      - POSTGRES_HOST=data_base # Utilisez le nom du service comme hôte
      - POSTGRES_DB=transcendence
      - POSTGRES_USER=postgresTranscendence
      - POSTGRES_PASSWORD=postgresTranscendence123

volumes:
  data_base_data:
    # name: data_base
    # driver: local # ici nous stockons le volume en local
    # driver_opts:
    #   type: 'none' # aucun type specifique
    #   o: 'bind' # on monte le volume directement sur le chemin ./src/front/public:/app
    #   device: data_base

networks:
  front:
    driver: bridge
  back:
    driver: bridge
  data_base:
    driver: bridge
